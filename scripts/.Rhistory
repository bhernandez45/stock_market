prices %>%
ggplot(aes(x = date, y = adjusted, color = symbol)) +
geom_line() +
facet_wrap(~symbol,scales = 'free_y') +
theme_classic() +
labs(x = 'Date',
y = "Adjusted Price",
title = "Price Chart") +
scale_x_date(date_breaks = "month",
date_labels = "%b\n%y")
tickers_matrix2=as.matrix(tickers_matrix2)
dim(tickers_matrix2)
(noquote(tickers_matrix2)
)
tickers_matrix2[1,1]
#subset_data=noquote(tickers_matrix2[1,1:ncol(tickers_matrix2)])
rbind(noquote(tickers_matrix2[,1]))
#subset_data=noquote(tickers_matrix2[1,1:ncol(tickers_matrix2)])
rbind(get(noquote(tickers_matrix2[,1])))
rbind(c(get(noquote(tickers_matrix2[,1]))))
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i=1)
{
prices_rebind=prices_sub
}
else
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i=1)
{
prices_rebind=prices_sub
}
else
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
i
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i=1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
if (i==1)
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
prices_rebind
# building the growth model:
# unconditional growth model
m0=lmer(diff~1 + (1|time), data=prices_rebind)
# building the growth model:
# unconditional growth model
m0=lmer(diff~1 + (1|day), data=prices_rebind)
summary(m0)
icc(m0)
VarCorr(m0)
dim(VarCorr(m0))
as.matrix(VarCorr(m0))
m0_re=as.matrix(VarCorr(m0)) # grabbing the random effects
sim(m0_re)
dim(m0_re)
m0_re
m0_re=as.data.frame(VarCorr(m0)) # grabbing the random effects
dim(m0_re)
m0_re
m0_icc=m0_re[1,"vcov"]/m0_re[1,"vcov"]+m0_re[2,"vcov"]
m0_icc
m0_icc=m0_re[1,"vcov"]/(m0_re[1,"vcov"]+m0_re[2,"vcov"])
m0_icc
# building the growth model:
# unconditional growth model
m0=lmer(diff~day, data=prices_rebind)
# building the growth model:
# unconditional growth model
m0=lm(diff~day, data=prices_rebind)
m0
summary(m0)
m1=lmer(diff~day + (1|ticker), data=prices_rebind)
m1=lmer(diff~day + (1|symbol), data=prices_rebind)
summary(m1)
m1=lmer(diff~day + (1|symbol), data=prices_rebind)
m1_re=as.data.frame(VarCorr(m1)) # grabbing the random effects
m1_icc=m1_re[1,"vcov"]/(m1_re[1,"vcov"]+m1_re[2,"vcov"]) # percent variance accounted for based on grouping
m1_icc
m1_re
m2=lm(diff~day,data=AAPL)
m2_re = as.dataframe(VarCorr(m2))
m2_re = as.data.frame(VarCorr(m2))
m2_re = as.data.frame(VarCorr(m2))
m2=lm(diff~day,data=AAPL)
m2$residuals
m2$coefficients
summary(m2)
m2$terms
m2$model
m1_re=as.data.frame(VarCorr(m1)) # grabbing the random effects
m1_icc=m1_re[1,"vcov"]/(m1_re[1,"vcov"]+m1_re[2,"vcov"]) # percent variance accounted for based on grouping
summary(m1)
# building the growth model:
# unconditional growth model
m0=lm(per_diff~day, data=prices_rebind)
# building the growth model:
# unconditional growth model
m0=lm(perc_diff~day, data=prices_rebind)
m1=lmer(perc_diff~day + (1|symbol), data=prices_rebind)
mean(prices_rebind$perc_diff)
str(prices_rebind$perc_diff)
View(prices_rebind)
# getting the past ticker information based on dates
from_date = "2010-01-01"
to_date = Sys.Date()
prices <- tq_get(tickers,
from = from_date,
to = to_date, # change to current day date
get = "stock.prices")
# adding variables to the prices dataset
prices$diff=prices$close-prices$open
prices$perc_diff=prices$diff/prices$open # percent difference
prices$perc_diffXvol=prices$perc_diff*prices$volume # percent difference * volume
prices$success[prices$diff >= 0]=1 # Binary code for up or down
prices$success[prices$diff < 0]=0 # Binary code for up or down
prices
view(prices)
View(prices)
# creating subsets of the prices data for each ticker
tickers_matrix=t(as.matrix(unique(prices$symbol)))
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
View(rebind)
View(prices_rebind)
nrow(prices_rebind)
mean(prices_rebind$perc_diff, na.rm=TRUE)
max(prices_rebind$perc_diff)
min(prices_rebind$perc_diff,na.rm=TRUE)
max(prices_rebind$perc_diff,na.rm=TRUE)
61.83/.00000001
61.83/.0000000000001
61.83/.00000000000000000001
61.83/.000000000000000000000000000000000000001
61.83/.0000000000000000000000000000000000000000000000000000000001
61.83/.000000000000000000000000000000000000000000000000000000000000000001
prices$open==0
# cleaning/adding variables to the prices dataset
prices$open[prices$open==0]=.00000000001
View(prices)
prices$diff=prices$close-prices$open
prices$perc_diff=prices$diff/prices$open # percent difference
prices$perc_diffXvol=prices$perc_diff*prices$volume # percent difference * volume
prices$success[prices$diff >= 0]=1 # Binary code for up or down
prices$success[prices$diff < 0]=0 # Binary code for up or down
# creating subsets of the prices data for each ticker
tickers_matrix=t(as.matrix(unique(prices$symbol)))
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
prices$perc_diff[prices$open==smallint]=0
# cleaning/adding variables to the prices dataset
smallint=.0000000001
smallint
prices$open[prices$open==0]=smallint # adding a values to companys open value if they open within the specified time range
prices$perc_diff[prices$open==smallint]=0 #
which[prices$open==smallint]
which[prices$open==smallint,]
View(prices)
prices$open==smallint
prices$perc_diff[prices$open==smallint]
prices$perc_diff[,prices$open==smallint]
prices$perc_diff[prices$open==smallint,]
# getting past ticker information
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
# loading tickers to fetch
ticker_dataset = read.csv("https://raw.githubusercontent.com/bhernandez45/stock_market/master/data_sets/other_data/tickers.csv")
# grabbing just the names of the tickers from ticker_dataset
ticker_dataset[,1]=as.character(ticker_dataset[,1]) # the variable is set to as.factor by default
tickers=unique(ticker_dataset[,1])  # pulls the unique values from the first column
# getting the past ticker information based on dates
from_date = "2010-01-01"
to_date = Sys.Date()
prices <- tq_get(tickers,
from = from_date,
to = to_date, # change to current day date
get = "stock.prices")
# cleaning/adding variables to the prices dataset
smallint=.0000000001
prices$open[prices$open==0]=smallint # adding a values to companys open value if they open within the specified time range
prices$diff=prices$close-prices$open # close - open (+ indicate closed higher than open)
prices$perc_diff=prices$diff/prices$open # percent difference
prices$perc_diffXvol=prices$perc_diff*prices$volume # percent difference * volume
prices$perc_diff[prices$open==smallint]=NA # recoding
View(prices)
prices$volume[prices$volume ==0] = NA # recoding to NA
warnings
warnings()
unique(prices$volume)
View(prices)
prices$success=NA
prices$success[prices$diff >= 0]=1 # Binary code for up or down
prices$success[prices$diff < 0]=0 # Binary code for up or down
# creating subsets of the prices data for each ticker
tickers_matrix=t(as.matrix(unique(prices$symbol)))
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_per_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_open=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
m1=lmer(perc_diff~day + (1|symbol), data=prices_rebind)
summary(m1)
m2=lmer(perc_diff~day + pd_close + (1|symbol), data=prices_rebind)
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_dif=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_close=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_perc_diff=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_close=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_perc_diff=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_close=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_perc_diff=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub$pd_perc_diff_cmc=pd_perc_diff-l20_perc_diff # cmc = cluster mean centered
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diff=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_close=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_perc_diff=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_close=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_perc_diff=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_close=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_perc_diff=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub$pd_perc_diff_cmc=pd_perc_diff-l20_perc_diff # cmc = cluster mean centered
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
for (i in 1:length(tickers_matrix)) {
ticker_sub=tickers_matrix[1,i] # ticker we're subsetting by
ticker_sub2=gsub("[^[:alnum:][:blank:]?&/\\-]", "", ticker_sub) # removes non alpha-numeric characters
prices_sub=prices[which(prices$symbol==ticker_sub),] #subsets based on the ticker
# adding a variable for the day 1-nrow
prices_sub= prices_sub[order(prices_sub[,"date"]),] # order data (ascending)
prices_sub$day=seq(from=1, to=nrow(prices_sub)) # create a sequence for "time"
prices_sub=mutate(prices_sub, pd_open=lag(open)) # pd=previous day
prices_sub=mutate(prices_sub, pd_close=lag(close)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diff=lag(perc_diff)) # pd=previous day
prices_sub=mutate(prices_sub, pd_perc_diffXvol=lag(perc_diffXvol)) # pd=previous day
prices_sub=mutate(prices_sub, l5_open=rollmean(x=open, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_close=rollmean(x=close, 5, align = "right", fill = NA)) # l5= last 5 trading days (approx weekly average)
prices_sub=mutate(prices_sub, l5_perc_diff=rollmean(x=perc_diff, 5, align = "right", fill = NA)) # l5= last 5 tradings days (approx weekly average)
prices_sub=mutate(prices_sub, l20_open=rollmean(x=open, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_close=rollmean(x=close, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l20_perc_diff=rollmean(x=perc_diff, 20, align = "right", fill = NA)) # l20= last 20 trading days (approx monthly average: 5 tradings days per week * 4 weeks)
prices_sub=mutate(prices_sub, l260_open=rollmean(x=open, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_close=rollmean(x=close, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub=mutate(prices_sub, l260_perc_diff=rollmean(x=perc_diff, 260, align = "right", fill = NA)) # l260= last 260 trading days (approx yearly average: 5 tradings days per week * 52 weeks)
prices_sub$pd_perc_diff_cmc=prices_sub$pd_perc_diff-prices_sub$l20_perc_diff # cmc = cluster mean centered
assign(ticker_sub2, prices_sub) # calls the ticker name and assigns it to the dataset
if (i==1)
{
prices_rebind=prices_sub
}
else if (i>1)
{
prices_rebind=rbind(prices_rebind, prices_sub)
}
}
install.packages("cronR")
cronR:::cron_rstudioaddin()
cronR:::cron_rstudioaddin()
install.packages("hinyFiles")
m2=lmer(perc_diff~day + pd_perc_diff_cmc + (1|symbol), data=prices_rebind)
m2_re=as.data.frame(VarCorr(m2)) # grabbing the random effects
m2_icc=m2_re[1,"vcov"]/(m2_re[1,"vcov"]+m2_re[2,"vcov"]) # percent variance accounted for based on grouping
summary(m2)
m2=lmer(perc_diff~day + open + pd_perc_diff_cmc + (1|symbol), data=prices_rebind)
summary(m2)
View(prices_rebind)
m2=lmer(perc_diff~day + open + pd_perc_diffXvol + (1|symbol), data=prices_rebind)
summary(m2)
lm(perc_diff~day + open + pd_perc_diffXvol, data=AAPL)
summary(lm(perc_diff~day + open + pd_perc_diffXvol, data=AAPL))
summary(lm(perc_diff~day + open + pd_perc_diff + vol + pd_perc_diffXvol, data=AAPL))
summary(lm(perc_diff~day + open + pd_perc_diff + volume + pd_perc_diffXvol, data=AAPL))
summary(lm(perc_diff~day + open + pd_perc_diff + volume + pd_perc_diffXvol, data=AMZN))
summary(lm(perc_diff~day + open + pd_perc_diff + volume + pd_perc_diffXvol, data=AAL))
m2=lmer(close~day + open + pd_perc_diffXvol + (1|symbol), data=prices_rebind)
summary(lm(close~day + open + pd_perc_diff + volume + pd_perc_diffXvol, data=AAL))
temp = summary(lm(close~day + open + pd_perc_diff + volume + pd_perc_diffXvol, data=AAL))
temp$call$data
temp$r.squared
temp$residuals
temp$sigma
temp$coefficients
temp$coefficients[,4]
temp$coefficients["Pr(>|t|"]
temp$coefficient
temp$coefficient$Pr(>|t|)
temp$coefficient[,4]
cronR:::cron_rstudioaddin()
View(temp)
